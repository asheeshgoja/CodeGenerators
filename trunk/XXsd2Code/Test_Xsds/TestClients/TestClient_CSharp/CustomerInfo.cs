//Auto generated code
//Code generated by XXsd2Code<http://xxsd2code.sourceforge.net/> XXsd2Code.exe version 1.0.0
//For any comments/suggestions contact code generator author at asheesh.goja@gmail.com
//Auto generated code
//Auto generated code
 
using System;
using System.Collections.Generic;
 
 
using XXsd2CodeSample.CommonElements;
 
 
namespace XXsd2CodeSample
{
 
	//enumeration	CreditRating
	public enum	CreditRating
	{
		[System.Xml.Serialization.XmlEnum(Name = "700")] Good = 700,
		[System.Xml.Serialization.XmlEnum(Name = "750")] VeryGood = 750,
		[System.Xml.Serialization.XmlEnum(Name = "790")] ExtremelyGood = 790,
		[System.Xml.Serialization.XmlEnum(Name = "300")] Poor = 300
			
	}
 
	[Serializable]
	public class	Address : ICloneable
	{
		public	string		name;
		public	int		zip;
		public	string		city;
		public	string		country;
			
		//default constructor
		public	Address()
		{
			name = String.Empty;
			zip = 0 ;
			city = String.Empty;
			country = String.Empty;
		}
			
		//IClonable Override
		public	virtual	object Clone()
		{
			Address	 instance = new Address() ;
			instance.name = name ;
			instance.zip = zip ;
			instance.city = city ;
			instance.country = country ;
			return instance;
		}
			
		//DeepCopy
		public	void DeepCopy(Address from)
		{
			name = from.name ;
			zip = from.zip ;
			city = from.city ;
			country = from.country ;
		}
			
	}
 
	[Serializable]
	public class	CustomerOrder : ICloneable
	{
		public	string		CustomerID;
		public	CreditRating		Rating;
		public	Address		AddressInfo;

		public	List<XXsd2CodeSample.CommonElements.OrderItem>	Orders;
			
		//default constructor
		public	CustomerOrder()
		{
			CustomerID = String.Empty;
			Rating = XXsd2CodeSample.CreditRating.Good ;
			AddressInfo = new Address() ;
			Orders = new List<XXsd2CodeSample.CommonElements.OrderItem>() ;
		}
			
		//IClonable Override
		public	virtual	object Clone()
		{
			CustomerOrder	 instance = new CustomerOrder() ;
			instance.CustomerID = CustomerID ;
			instance.Rating = Rating ;
			instance.AddressInfo = (Address)AddressInfo.Clone() ;
			instance.Orders.AddRange(Orders) ;
			return instance;
		}
			
		//DeepCopy
		public	void DeepCopy(CustomerOrder from)
		{
			CustomerID = from.CustomerID ;
			Rating = from.Rating ;
			AddressInfo.DeepCopy(from.AddressInfo) ;
			Orders.AddRange(from.Orders) ;
		}
			
	}
}


